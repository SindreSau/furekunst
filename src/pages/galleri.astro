---
import MainLayout from '../layouts/MainLayout.astro';
import GalleryPost from '../components/GalleryPost.astro';

import { contentfulClient } from '../lib/contentful';
import type { IGalleryPost, GalleryPostEntry } from '../types/galleryPost';

const entries = await contentfulClient.getEntries<IGalleryPost>({
    content_type: 'galleryPost',
});

const posts = entries.items as unknown as GalleryPostEntry[];
---

<MainLayout title='Galleri'>
    <h1 class='text-3xl mb-6'>Galleri</h1>
    <div class='grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 md:px-0 px-10'>
        {
            posts.map((post) => {
                if (!post.fields.image || !post.fields.image.fields.file) {
                    return null;
                }
                const aspectRatio =
                    (post.fields.image.fields.file.details.image?.height ?? 1) /
                    (post.fields.image.fields.file.details.image?.width ?? 1);
                const isSquare = aspectRatio >= 0.9 && aspectRatio < 1.1;
                const isLandscape = aspectRatio < 0.9;

                return (
                    <div
                        class={`${
                            isLandscape
                                ? 'col-span-1 sm:col-span-3'
                                : isSquare
                                  ? 'col-span-1 sm:col-span-2'
                                  : 'col-span-1'
                        }`}>
                        <GalleryPost post={post} />
                    </div>
                );
            })
        }
    </div>
</MainLayout>
<!-- 
<style>
    .fade-in-element {
        opacity: 0;
        transform: translateY(20px);
        transition:
            opacity 0.5s ease-out,
            transform 0.5s ease-out;
    }

    .fade-in-element.visible {
        opacity: 1;
        transform: translateY(0);
    }
</style>

<script>
    function setupFadeInAnimations() {
        const fadeElements = document.querySelectorAll('.fade-in-element');

        const observer = new IntersectionObserver(
            (entries) => {
                entries.forEach((entry, index) => {
                    if (entry.isIntersecting) {
                        setTimeout(() => {
                            entry.target.classList.add('visible');
                        }, index * 50); // Stagger effect: 100ms delay for each element
                        observer.unobserve(entry.target);
                    }
                });
            },
            {
                root: null,
                rootMargin: '0px',
                threshold: 0.1,
            }
        );

        fadeElements.forEach((element) => {
            observer.observe(element);
        });
    }

    // Run on initial load
    document.addEventListener('DOMContentLoaded', setupFadeInAnimations);

    // For Astro's view transitions
    document.addEventListener('astro:after-swap', setupFadeInAnimations);
</script> -->
