---
import { Image } from 'astro:assets';

interface Props {
    src: string;
    alt: string;
    width: number;
    height: number;
    widths: number[];
    quality?: 'low' | 'mid' | 'high' | 'max';
    outerFrameWidth?: number;
    passepartoutWidth?: number;
    outerFrameColor?: string;
    passepartoutColor?: string;
    passepartout?: boolean;
}

const {
    src,
    alt,
    width,
    height,
    widths,
    quality = 'mid',
    outerFrameWidth = 3,
    passepartoutWidth = 20,
    outerFrameColor = 'black',
    passepartoutColor = '#f8f8f8',
    passepartout = false,
} = Astro.props;

const aspectRatio = (height / width) * 100;
const totalFrameWidth = outerFrameWidth + (passepartout ? passepartoutWidth : 0);

const sizesString = widths
    ? widths.map((width) => `(max-width: ${width}px) ${width}px`).join(', ')
    : `(max-width: ${width}px) ${width}px`;
---

<div class='relative w-full frame-shadow inset-0 h-full object-cover' style={`padding-bottom: ${aspectRatio}%;`}>
    <div class='absolute inset-0'>
        <div class='w-full h-full' style={`border: ${outerFrameWidth}px solid ${outerFrameColor};`}>
            {
                passepartout && (
                    <div
                        class='absolute inset-0'
                        style={`border: ${passepartoutWidth}px solid ${passepartoutColor}; top: ${outerFrameWidth}px; left: ${outerFrameWidth}px; right: ${outerFrameWidth}px; bottom: ${outerFrameWidth}px;`}
                    />
                )
            }
        </div>
        <Image
            src={src}
            inferSize={true}
            alt={alt}
            width={width}
            height={height}
            widths={widths}
            sizes={sizesString}
            quality={quality}
            loading={'eager'}
            class='absolute inset-0 w-full h-full object-cover'
            style={`padding: ${totalFrameWidth}px;`}
        />
    </div>
</div>
